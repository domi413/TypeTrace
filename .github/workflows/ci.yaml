name: CI

on:
  pull_request:
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize

jobs:
  dictionary:
    runs-on: ubuntu-latest
    name: Check dictionary sorting
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if dictionary is sorted
        run: |
          BOLD_RED="\033[1;31m"
          BOLD_YELLOW="\033[1;33m"
          BOLD_GREEN="\033[1;32m"
          RESET="\033[0m"

          if [ ! -f ".cspell_ignored" ]; then
            echo -e "${BOLD_RED}Error: .cspell_ignored not found${RESET}"
            exit 1
          fi

          # Check if file is sorted (case-insensitive)
          if sort -cf .cspell_ignored; then
            echo -e "${BOLD_GREEN}âœ“ .cspell_ignored is properly sorted${RESET}"
          else
            echo -e "${BOLD_RED}Error: .cspell_ignored is not sorted alphabetically (case-insensitive)${RESET}"
            echo -e "${BOLD_YELLOW}To fix this, run: sort -f .cspell_ignored -o .cspell_ignored${RESET}"
            exit 1
          fi
        shell: bash

  spellcheck:
    runs-on: ubuntu-latest
    name: Spellcheck
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Starting cspell
        uses: streetsidesoftware/cspell-action@v7
        with:
          files: ""
          root: "."
          check_dot_files: false
          inline: error
          treat_flagged_words_as_errors: false
          suggestions: true
          strict: true
          config: ".cspell.yaml"
          incremental_files_only: ${{ env.ACT != 'true' }}
          verbose: true
          use_cspell_files: false

  # build:
  #   runs-on: ${{ matrix.os }}
  #   name: Build (${{ matrix.os }})
  #   timeout-minutes: 60
  #   strategy:
  #     matrix:
  #       os:
  #         # - windows-2022
  #         - ubuntu-24.04
  #         # - macos-14 # arm64
  #         # - macos-13
  #       compiler:
  #         - llvm

  #   if: ${{ !github.event.pull_request.draft }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v5

  #     - name: Cache CMake build
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ./build/
  #           ~/vcpkg/
  #         key: build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', 'vcpkg.json') }}-${{ github.sha }}
  #         restore-keys: |
  #           build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', 'vcpkg.json') }}-
  #           build-${{ runner.os }}-

  #     - name: Setup C++
  #       uses: aminya/setup-cpp@v1
  #       with:
  #         compiler: llvm
  #         cmake: true
  #         ninja: true
  #         vcpkg: true
  #         # ccache: true  (Seems to make the pipeline fail (don't know why)

  #     - name: Set vcpkg environment
  #       run: |
  #         echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV

  #     - name: Build project
  #       run: make build

  # test:
  #   runs-on: ubuntu-latest
  #   name: Test
  #   timeout-minutes: 10

  #   if: ${{ !github.event.pull_request.draft }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v5

  #     - name: Cache build and test artifacts
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ./build/
  #           ~/.cache/ccache
  #           ~/.ccache
  #           ~/.config/ccache
  #           ~/.cache/gcovr
  #         key: test-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/CMakePresets.json', 'tests/**/*') }}-${{ github.sha }}
  #         restore-keys: |
  #           test-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/CMakePresets.json', 'tests/**/*') }}-
  #           test-${{ runner.os }}-
  #           build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/CMakePresets.json') }}-

  #     - name: Setup C++
  #       uses: aminya/setup-cpp@v1
  #       with:
  #         compiler: llvm
  #         cmake: true
  #         ninja: true
  #         vcpkg: true
  #         ccache: true
  #         gcovr: true

  #     - name: Build project
  #       run: make build

  #     - name: Run tests
  #       run: make test

  #     - name: Check test coverage
  #       uses: threeal/gcovr-action@v1
  #       with:
  #         fail-under-line: 60
  #         html-out: coverage.html
  #         print-summary: true
  #         gcov-executable: llvm-cov gcov

  #     - name: Upload coverage reports
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: coverage-reports
  #         path: coverage.html

  lint:
    runs-on: ubuntu-latest
    name: Lint and Format Check
    timeout-minutes: 10
    container:
      image: archlinux:base-devel

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      #   - name: Cache build artifacts (for clang-tidy)
      #     uses: actions/cache@v4
      #     with:
      #       path: |
      #         ./build/
      #         ~/.cache/ccache
      #         ~/.ccache
      #         ~/.config/ccache
      #       key: lint-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/CMakePresets.json') }}-${{ github.sha }}
      #       restore-keys: |
      #         lint-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/CMakePresets.json') }}-
      #         lint-${{ runner.os }}-
      #         build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/CMakePresets.json') }}-

      - name: Install dependencies
        run: |
          # Install base packages
          pacman -Sy --needed git base-devel --noconfirm

          # Create a non-root user for AUR operations
          useradd -m -G wheel -s /bin/bash aur
          echo 'aur ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

          # Install yay as the aur user
          su - aur -c "
            git clone https://aur.archlinux.org/yay.git
            cd yay
            makepkg -si --noconfirm
          "

          # Install packages
          su - aur -c "
            yay -Sy --noconfirm \
              clang \
              cmake \
              gtkmm-4.0 \
              make \
              ninja \
              spdlog \
              sqlite \
              sqlitecpp \
              ninja \
              libevdev \
              pkgconf \
              python-gersemi
          "

      - name: Check formatting
        run: make check-format

      - name: Run lint
        run: make lint
