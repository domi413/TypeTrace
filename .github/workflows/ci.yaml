name: CI

on:
  pull_request:
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize

jobs:
  dictionary:
    runs-on: ubuntu-latest
    name: Check dictionary sorting
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if dictionary is sorted
        run: |
          BOLD_RED="\033[1;31m"
          BOLD_YELLOW="\033[1;33m"
          BOLD_GREEN="\033[1;32m"
          RESET="\033[0m"

          if [ ! -f ".dictionaries/project-words.txt" ]; then
            echo -e "${BOLD_RED}Error: .dictionaries/project-words.txt not found${RESET}"
            exit 1
          fi

          # Check if file is sorted (case-insensitive)
          if sort -cf .dictionaries/project-words.txt; then
            echo -e "${BOLD_GREEN}âœ“ .dictionaries/project-words.txt is properly sorted${RESET}"
          else
            echo -e "${BOLD_RED}Error: .dictionaries/project-words.txt is not sorted alphabetically (case-insensitive)${RESET}"
            echo -e "${BOLD_YELLOW}To fix this, run: sort -f .dictionaries/project-words.txt -o .dictionaries/project-words.txt${RESET}"
            exit 1
          fi
        shell: bash

  spellcheck:
    runs-on: ubuntu-latest
    name: Spellcheck
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Starting cspell
        uses: streetsidesoftware/cspell-action@v7
        with:
          files: ""
          root: "."
          check_dot_files: false
          inline: error
          treat_flagged_words_as_errors: false
          suggestions: true
          strict: true
          config: ".cspell.yaml"
          incremental_files_only: ${{ env.ACT != 'true' }}
          verbose: true
          use_cspell_files: false

  # TODO: Implement test, lint and formatting. We may not use
  # archlinux:latest or at least only one runner for all tasks (not
  # really clean solution)
  test:
    runs-on: ubuntu-latest
    name: Test
    timeout-minutes: 10
    container: archlinux:latest
  lint:
    runs-on: ubuntu-latest
    name: Lint
    timeout-minutes: 10
    container: archlinux:latest

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install archlinux dependencies
        run: |
          pacman -Sy --noconfirm --needed \
            clang \
            cmake \

      - name: Run lint
        run: make lint
