name: CI

on:
  pull_request:
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize

jobs:
  dictionary:
    runs-on: ubuntu-latest
    name: Check dictionary sorting
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if dictionary is sorted
        run: |
          BOLD_RED="\033[1;31m"
          BOLD_YELLOW="\033[1;33m"
          BOLD_GREEN="\033[1;32m"
          RESET="\033[0m"

          if [ ! -f ".cspell_ignored" ]; then
            echo -e "${BOLD_RED}Error: .cspell_ignored not found${RESET}"
            exit 1
          fi

          # Check if file is sorted (case-insensitive)
          if sort -cf .cspell_ignored; then
            echo -e "${BOLD_GREEN}✓ .cspell_ignored is properly sorted${RESET}"
          else
            echo -e "${BOLD_RED}Error: .cspell_ignored is not sorted alphabetically (case-insensitive)${RESET}"
            echo -e "${BOLD_YELLOW}To fix this, run: sort -f .cspell_ignored -o .cspell_ignored${RESET}"
            exit 1
          fi
        shell: bash

  spellcheck:
    runs-on: ubuntu-latest
    name: Spellcheck
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Starting cspell
        uses: streetsidesoftware/cspell-action@v7
        with:
          files: ""
          root: "."
          check_dot_files: false
          inline: error
          treat_flagged_words_as_errors: false
          suggestions: true
          strict: true
          config: ".cspell.yaml"
          incremental_files_only: ${{ env.ACT != 'true' }}
          verbose: true
          use_cspell_files: false

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: read

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup C++
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm
          cmake: true
          ninja: true
          vcpkg: true
          ccache: true

      - name: Build project
        run: make build

  test:
    runs-on: ubuntu-latest
    name: Test
    timeout-minutes: 5

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup C++
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm
          cmake: true
          ninja: true
          vcpkg: true
          ccache: true
          gcovr: true

      - name: Build project
        run: make build

      - name: Run tests
        run: make test

      - name: Check test coverage
        uses: threeal/gcovr-action@v1
        with:
          fail-under-line: 60
          html-out: coverage.html
          print-summary: true
          gcov-executable: llvm-cov gcov
          # sonarqube-out: path_to_configure

  lint:
    runs-on: ubuntu-latest
    name: Lint and Format Check
    timeout-minutes: 10

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup C++
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm
          cmake: true
          ninja: true
          clang-tidy: true
          clang-format: true

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Install gersemi
        run: uv pip install gersemi

      - name: Build project
        run: make build

      - name: Check code formatting
        run: make check-format

      - name: Run clang-tidy
        uses: cpp-linter/cpp-linter-action@v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: "file"
          tidy-checks: ""
          thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}
          file-annotations: true
          step-summary: true
          tidy-review: false
          format-review: false

      - name: Fail if linting issues found
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "❌ Linting failed with ${{ steps.linter.outputs.checks-failed }} issues"
          exit 1
